/*
 * Copyright 2018-2021 Maksim Zheravin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exchange.core2.benchmarks.generator.symbols;

import exchange.core2.benchmarks.generator.Constants;
import exchange.core2.benchmarks.generator.GeneratorSymbolSpec;
import exchange.core2.benchmarks.generator.util.RandomUtils;

import java.util.*;
import java.util.function.Supplier;

public final class SymbolsGenerator {


    public static List<GeneratorSymbolSpec> generateRandomSymbols(final int num,
                                                                  final Collection<Integer> currenciesAllowed,
                                                                  final EnumSet<GeneratorSymbolSpec.SymbolType> allowedSymbolTypes) {
        final Random random = new Random(1L);

        // TODO make utility method EnumSet<T>
        final Supplier<GeneratorSymbolSpec.SymbolType> symbolTypeSupplier = RandomUtils.enumValuesSupplier(allowedSymbolTypes, random);

        final List<Integer> currencies = new ArrayList<>(currenciesAllowed);
        final List<GeneratorSymbolSpec> result = new ArrayList<>();
        for (int i = 0; i < num; ) {
            int baseCurrency = currencies.get(random.nextInt(currencies.size()));
            int quoteCurrency = currencies.get(random.nextInt(currencies.size()));
            if (baseCurrency != quoteCurrency) {

                final GeneratorSymbolSpec.SymbolType type = symbolTypeSupplier.get();

                final long makerFee = random.nextInt(1000);
                final long takerFee = makerFee + random.nextInt(500);

                final long marginBuy;
                final long marginSell;
                if (type == GeneratorSymbolSpec.SymbolType.FUTURES_CONTRACT) {
                    marginBuy = random.nextInt(1000) + 1L;
                    marginSell = random.nextInt(1000) + 1L;
                } else {
                    marginBuy = 0L;
                    marginSell = 0L;
                }

                final GeneratorSymbolSpec symbol = new GeneratorSymbolSpec(
                        Constants.SYMBOL_AUTOGENERATED_RANGE_START + i,
                        type,
                        baseCurrency, // TODO for futures can be any value?
                        quoteCurrency,
                        100,
                        10,
                        takerFee,
                        makerFee,
                        marginBuy,
                        marginSell);

                result.add(symbol);

                //log.debug("{}", symbol);
                i++;
            }
        }
        return result;
    }




}
